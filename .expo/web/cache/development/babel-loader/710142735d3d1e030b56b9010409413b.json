{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/yanes/Documents/manga_reader/screens/Display.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\n\nvar Display = function Display(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var getMangas = function getMangas() {\n    try {\n      fetch(\"http://localhost:5000/One Piece/990\").then(function (data) {\n        setData(data);\n        setLoading(false);\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(function () {\n    getMangas();\n  }, []);\n  return React.createElement(ScrollView, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, isLoading ? React.createElement(ActivityIndicator, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 26\n    }\n  }) : Object.keys(data).map(function (page) {\n    return React.createElement(Text, {\n      style: {\n        marginTop: 50,\n        backgroundColor: 'white'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }\n    }, \" page \");\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'black'\n  },\n  page: {\n    flex: 1,\n    height: 500,\n    resizeMode: 'contain'\n  }\n});\nexport default Display;","map":{"version":3,"sources":["/home/yanes/Documents/manga_reader/screens/Display.js"],"names":["React","useState","useEffect","Display","route","isLoading","setLoading","data","setData","getMangas","fetch","then","error","console","styles","container","Object","keys","map","page","marginTop","backgroundColor","StyleSheet","create","flex","height","resizeMode"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;;;;;AAGA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAa;AAAA,MAAXC,KAAW,QAAXA,KAAW;;AAEzB,kBAAgCH,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOI,SAAP;AAAA,MAAkBC,UAAlB;;AACA,mBAAwBL,QAAQ,EAAhC;AAAA;AAAA,MAAOM,IAAP;AAAA,MAAaC,OAAb;;AAOA,MAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,QAAI;AAEFC,MAAAA,KAAK,uCAAL,CAA6CC,IAA7C,CAAkD,UAACJ,IAAD,EAAU;AAE1DC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAD,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAJD;AAKD,KAPD,CAOE,OAAOM,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,GAXD;;AAcAV,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;AAIA,SACI,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAEK,MAAM,CAACC,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKV,SAAS,GAAG,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GACNW,MAAM,CAACC,IAAP,CAAYV,IAAZ,EAAkBW,GAAlB,CAAsB,UAAAC,IAAI;AAAA,WAEtB,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAI;AAACC,QAAAA,SAAS,EAAE,EAAZ;AAAgBC,QAAAA,eAAe,EAAE;AAAjC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFsB;AAAA,GAA1B,CAFR,CADJ;AAUH,CAtCD;;AAwCA,IAAMP,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC7BR,EAAAA,SAAS,EAAE;AACPS,IAAAA,IAAI,EAAC,CADE;AAEPH,IAAAA,eAAe,EAAE;AAFV,GADkB;AAK7BF,EAAAA,IAAI,EAAC;AACDK,IAAAA,IAAI,EAAC,CADJ;AAEDC,IAAAA,MAAM,EAAC,GAFN;AAGDC,IAAAA,UAAU,EAAE;AAHX;AALwB,CAAlB,CAAf;AAYA,eAAevB,OAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { ActivityIndicator, StyleSheet, ScrollView, Image, Text } from 'react-native';\n\nconst Display = ({route}) => {\n\n    const [isLoading, setLoading] = useState(true);\n    const [data, setData] = useState();\n  \n    // const fetchData = async (url) => {\n    //   const response = await fetch(url);\n    //   return response;\n    // };\n  \n    const getMangas = () => {\n      try {\n        // fetch(`http://localhost:5000/${route.params.title}/${route.params.chapter}`).then((data) => {\n        fetch(`http://localhost:5000/One Piece/990`).then((data) => {\n        \n          setData(data);\n          setLoading(false);\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    };\n  \n  \n    useEffect(() => {\n      getMangas();\n    }, []);\n\n    return (\n        <ScrollView style={styles.container}>\n            {isLoading ? <ActivityIndicator/> : (\n                Object.keys(data).map(page=>(\n                    // <Image style={styles.page} source={{uri: page}}></Image>\n                    <Text style = {{marginTop: 50 ,backgroundColor: 'white'}}> page </Text>\n                ))\n            )}\n        </ScrollView>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex:1,\n        backgroundColor: 'black',\n    },\n    page:{\n        flex:1,\n        height:500,\n        resizeMode: 'contain',\n    }\n});\n\nexport default Display;"]},"metadata":{},"sourceType":"module"}