{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/yanes/Documents/manga_reader/screens/Sandbox.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\n\nvar Sandbox = function Sandbox() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var getMovies = function getMovies() {\n    var response;\n    return _regeneratorRuntime.async(function getMovies$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              response = {\n                \"One Piece\": 1030\n              };\n              setData(response);\n            } catch (error) {\n              console.error(error);\n            } finally {\n              setLoading(false);\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    getMovies();\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      padding: 24\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, isLoading ? React.createElement(ActivityIndicator, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 20\n    }\n  }) : React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, Object.keys(data)));\n};\n\nexport default Sandbox;","map":{"version":3,"sources":["/home/yanes/Documents/manga_reader/screens/Sandbox.js"],"names":["React","useEffect","useState","Sandbox","isLoading","setLoading","data","setData","getMovies","response","error","console","flex","padding","Object","keys"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;AAGA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,kBAAgCD,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOE,SAAP;AAAA,MAAkBC,UAAlB;;AACA,mBAAwBH,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOI,IAAP;AAAA,MAAaC,OAAb;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AACf,gBAAI;AAEGC,cAAAA,QAFH,GAEc;AAAC,6BAAa;AAAd,eAFd;AAIHF,cAAAA,OAAO,CAACE,QAAD,CAAP;AACD,aALA,CAKC,OAAOC,KAAP,EAAc;AACdC,cAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,aAPA,SAOS;AACRL,cAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AAVe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAaAJ,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEI,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,OAAO,EAAE;AAApB,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,SAAS,GAAG,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GACR,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOU,MAAM,CAACC,IAAP,CAAYT,IAAZ,CAAP,CAFJ,CADF;AAOD,CA5BD;;AA8BA,eAAeH,OAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ActivityIndicator, FlatList, Text, View } from 'react-native';\n\nconst Sandbox = () => {\n  const [isLoading, setLoading] = useState(true);\n  const [data, setData] = useState([]);\n\n  const getMovies = async () => {\n     try {\n      // const response = await fetch('https://localhost:5000/');\n      const response = {\"One Piece\": 1030}\n      // const json = await response.json();\n      setData(response);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    getMovies();\n  }, []);\n\n  return (\n    <View style={{ flex: 1, padding: 24 }}>\n      {isLoading ? <ActivityIndicator/> : (\n        <Text>{Object.keys(data)}</Text>\n      )}\n    </View>\n  );\n};\n\nexport default Sandbox"]},"metadata":{},"sourceType":"module"}