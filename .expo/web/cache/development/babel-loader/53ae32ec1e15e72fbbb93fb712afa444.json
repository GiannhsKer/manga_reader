{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/yanes/Documents/manga_reader/screens/Sandbox.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\n\nvar Sandbox = function Sandbox() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var fetchData = function fetchData(url) {\n    var response;\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(url));\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.json());\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var getMangas = function getMangas() {\n    try {\n      fetchData(\"http://localhost:5000/\").then(function (data) {\n        setData(data);\n        setLoading(false);\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(function () {\n    getMangas();\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      padding: 24\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, isLoading ? React.createElement(ActivityIndicator, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 20\n    }\n  }) : React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, Object.keys(data)));\n};\n\nexport default Sandbox;","map":{"version":3,"sources":["/home/yanes/Documents/manga_reader/screens/Sandbox.js"],"names":["React","useEffect","useState","Sandbox","isLoading","setLoading","data","setData","fetchData","url","fetch","response","json","getMangas","then","error","console","flex","padding","Object","keys"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;AAGA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,kBAAgCD,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOE,SAAP;AAAA,MAAkBC,UAAlB;;AACA,mBAAwBH,QAAQ,EAAhC;AAAA;AAAA,MAAOI,IAAP;AAAA,MAAaC,OAAb;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACOC,KAAK,CAACD,GAAD,CADZ;;AAAA;AACVE,YAAAA,QADU;AAAA,6CAETA,QAAQ,CAACC,IAAT,EAFS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAKA,MAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,QAAI;AACFL,MAAAA,SAAS,CAAC,wBAAD,CAAT,CAAoCM,IAApC,CAAyC,UAACR,IAAD,EAAU;AACjDC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAD,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAHD;AAID,KALD,CAKE,OAAOU,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,GATD;;AAYAd,EAAAA,SAAS,CAAC,YAAM;AACdY,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEI,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,OAAO,EAAE;AAApB,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,SAAS,GAAG,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GACR,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOe,MAAM,CAACC,IAAP,CAAYd,IAAZ,CAAP,CAFJ,CADF;AAOD,CAhCD;;AAkCA,eAAeH,OAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ActivityIndicator, FlatList, Text, View } from 'react-native';\n\nconst Sandbox = () => {\n  const [isLoading, setLoading] = useState(true);\n  const [data, setData] = useState();\n\n  const fetchData = async (url) => {\n    const response = await fetch(url);\n    return response.json();\n  };\n\n  const getMangas = () => {\n    try {\n      fetchData(\"http://localhost:5000/\").then((data) => {\n        setData(data);\n        setLoading(false);\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n\n  useEffect(() => {\n    getMangas();\n  }, []);\n\n  return (\n    <View style={{ flex: 1, padding: 24 }}>\n      {isLoading ? <ActivityIndicator/> : (\n        <Text>{Object.keys(data)}</Text>\n      )}\n    </View>\n  );\n};\n\nexport default Sandbox"]},"metadata":{},"sourceType":"module"}