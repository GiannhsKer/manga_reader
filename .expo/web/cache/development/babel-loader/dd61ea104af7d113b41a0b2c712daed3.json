{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/yanes/Documents/manga_reader/screens/Sandbox.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\n\nvar Sandbox = function Sandbox() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var getMangas = function getMangas() {\n    var response, json;\n    return _regeneratorRuntime.async(function getMangas$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            response = {\n              \"One Piece\": 1030\n            };\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 4:\n            json = _context.sent;\n            setData(json);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 11:\n            _context.prev = 11;\n            setLoading(false);\n            return _context.finish(11);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8, 11, 14]], Promise);\n  };\n\n  useEffect(function () {\n    getMangas();\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      padding: 24\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, isLoading ? React.createElement(ActivityIndicator, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 20\n    }\n  }) : React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, Object.keys(data)));\n};\n\nexport default Sandbox;","map":{"version":3,"sources":["/home/yanes/Documents/manga_reader/screens/Sandbox.js"],"names":["React","useEffect","useState","Sandbox","isLoading","setLoading","data","setData","getMangas","response","json","console","error","flex","padding","Object","keys"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;AAGA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,kBAAgCD,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOE,SAAP;AAAA,MAAkBC,UAAlB;;AACA,mBAAwBH,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOI,IAAP;AAAA,MAAaC,OAAb;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGRC,YAAAA,QAHQ,GAGG;AAAC,2BAAc;AAAf,aAHH;AAAA;AAAA,6CAIKA,QAAQ,CAACC,IAAT,EAJL;;AAAA;AAIRA,YAAAA,IAJQ;AAKdH,YAAAA,OAAO,CAACG,IAAD,CAAP;AALc;AAAA;;AAAA;AAAA;AAAA;AAOdC,YAAAA,OAAO,CAACC,KAAR;;AAPc;AAAA;AASdP,YAAAA,UAAU,CAAC,KAAD,CAAV;AATc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAaAJ,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEK,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,OAAO,EAAE;AAApB,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,SAAS,GAAG,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GACR,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOW,MAAM,CAACC,IAAP,CAAYV,IAAZ,CAAP,CAFJ,CADF;AAOD,CA5BD;;AA8BA,eAAeH,OAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ActivityIndicator, FlatList, Text, View } from 'react-native';\n\nconst Sandbox = () => {\n  const [isLoading, setLoading] = useState(true);\n  const [data, setData] = useState([]);\n\n  const getMangas = async () => {\n     try {\n      // const response = await fetch('localhost:5000/');\n      const response = {\"One Piece\" : 1030}\n      const json = await response.json();\n      setData(json);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    getMangas();\n  }, []);\n\n  return (\n    <View style={{ flex: 1, padding: 24 }}>\n      {isLoading ? <ActivityIndicator/> : (\n        <Text>{Object.keys(data)}</Text>\n      )}\n    </View>\n  );\n};\n\nexport default Sandbox"]},"metadata":{},"sourceType":"module"}